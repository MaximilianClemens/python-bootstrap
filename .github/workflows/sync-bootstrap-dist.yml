name: Sync Bootstrap Dist

'on':
  schedule:
    # Run weekly on Mondays at 09:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering with force update option
    inputs:
      force_update:
        description: 'Force update even if version is the same'
        required: false
        type: boolean
        default: false
  push:
    branches: [ main ]
    paths: [ '.github/workflows/sync-bootstrap-dist.yml' ]

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Bootstrap release
        id: bootstrap-release
        run: |
          # Get latest release info from Bootstrap repository
          RELEASE_INFO=$(curl -s https://api.github.com/repos/twbs/bootstrap/releases/latest)
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          DIST_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains("dist.zip")) | .browser_download_url')
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "dist_url=$DIST_URL" >> $GITHUB_OUTPUT
          echo "release_name=$(echo "$RELEASE_INFO" | jq -r '.name')" >> $GITHUB_OUTPUT
          
          echo "Bootstrap version: $VERSION"
          echo "Dist URL: $DIST_URL"

      - name: Check if version already exists
        id: check-version
        run: |
          if [ -f "bootstrap/version.txt" ]; then
            CURRENT_VERSION=$(cat bootstrap/version.txt)
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "current_version=" >> $GITHUB_OUTPUT
          fi
          
          # Check for force update flag
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Force update requested"
          elif [ "${{ steps.bootstrap-release.outputs.version }}" = "$CURRENT_VERSION" ]; then
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "Bootstrap is already up to date ($CURRENT_VERSION)"
          else
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "Update needed: $CURRENT_VERSION -> ${{ steps.bootstrap-release.outputs.version }}"
          fi

      - name: Download and extract Bootstrap dist
        if: steps.check-version.outputs.update_needed == 'true'
        run: |
          # Download the dist ZIP
          curl -L "${{ steps.bootstrap-release.outputs.dist_url }}" -o bootstrap-dist.zip
          curl https://raw.githubusercontent.com/twbs/bootstrap/refs/heads/main/LICENSE -o bootstrap/LICENSE
          
          # Create bootstrap directory if it doesn't exist
          mkdir -p bootstrap
          
          # Remove old dist files but keep version.txt for now
          if [ -d "bootstrap/css" ]; then rm -rf bootstrap/css; fi
          if [ -d "bootstrap/js" ]; then rm -rf bootstrap/js; fi
          
          # Extract the ZIP
          unzip -q bootstrap-dist.zip
          
          # Find the extracted directory (should be like bootstrap-5.3.8-dist)
          EXTRACT_DIR=$(find . -maxdepth 1 -name "bootstrap-*-dist" -type d)
          
          # Move the contents to our bootstrap directory
          if [ -d "$EXTRACT_DIR" ]; then
            cp -r "$EXTRACT_DIR"/* bootstrap/
          fi
          
          # Clean up
          rm -rf "$EXTRACT_DIR" bootstrap-dist.zip
          
          # Write version file
          echo "${{ steps.bootstrap-release.outputs.version }}" > bootstrap/version.txt
          
          echo "Bootstrap ${{ steps.bootstrap-release.outputs.version }} extracted successfully"

      - name: Create Pull Request
        if: steps.check-version.outputs.update_needed == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update Bootstrap to ${{ steps.bootstrap-release.outputs.version }}"
          title: "Update Bootstrap to ${{ steps.bootstrap-release.outputs.version }}"
          body: |
            ## Bootstrap Update
            
            This PR updates Bootstrap from `${{ steps.check-version.outputs.current_version }}` to `${{ steps.bootstrap-release.outputs.version }}`.
            
            **Changes:**
            - Updated Bootstrap CSS and JS files
            - Version: ${{ steps.bootstrap-release.outputs.release_name }}
            
            **Source:** [Bootstrap Release ${{ steps.bootstrap-release.outputs.version }}](https://github.com/twbs/bootstrap/releases/tag/${{ steps.bootstrap-release.outputs.version }})
            
            This update was automatically generated by the sync-bootstrap-dist workflow and will be auto-merged.
          branch: update-bootstrap-${{ steps.bootstrap-release.outputs.version }}
          delete-branch: true
          base: main

      - name: Auto-merge Pull Request
        if: steps.check-version.outputs.update_needed == 'true' && steps.create-pr.outputs.pull-request-number != ''
        run: |
          # Wait a moment for PR to be fully created
          sleep 5
          
          # Enable auto-merge on the PR
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} --auto --squash --delete-branch
          
          echo "✅ Auto-merge enabled for PR #${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag and Release
        if: steps.check-version.outputs.update_needed == 'true' && steps.create-pr.outputs.pull-request-number != ''
        run: |
          # Wait for auto-merge to complete
          echo "Waiting for PR auto-merge to complete..."
          
          # Poll for merge completion (max 5 minutes)
          for i in {1..30}; do
            if gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state' | grep -q "MERGED"; then
              echo "✅ PR successfully merged!"
              break
            elif gh pr view ${{ steps.create-pr.outputs.pull-request-number }} --json state --jq '.state' | grep -q "CLOSED"; then
              echo "❌ PR was closed without merging"
              exit 1
            fi
            echo "Waiting for merge... (attempt $i/30)"
            sleep 10
          done
          
          # Fetch latest changes after merge
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Create and push git tag
          VERSION="${{ steps.bootstrap-release.outputs.version }}"
          CLEAN_VERSION=${VERSION#v}
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "$CLEAN_VERSION" -m "Release bootstrap_wrapper $CLEAN_VERSION with Bootstrap $VERSION"
          git push origin "$CLEAN_VERSION"
          
          echo "✅ Created and pushed git tag: $CLEAN_VERSION"
          echo "tag_name=$CLEAN_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create-tag

      - name: Create GitHub Release
        if: steps.check-version.outputs.update_needed == 'true' && steps.create-tag.outputs.tag_name != ''
        run: |
          gh release create "${{ steps.create-tag.outputs.tag_name }}" \
            --title "bootstrap-wrapper ${{ steps.create-tag.outputs.tag_name }}" \
            --notes "## Bootstrap Wrapper Release ${{ steps.create-tag.outputs.tag_name }}

          This release includes Bootstrap ${{ steps.bootstrap-release.outputs.version }} assets.

          ### What's included:
          - Bootstrap CSS files (minified and source)
          - Bootstrap JavaScript files (minified and source)  
          - Python package wrapper for easy integration

          ### Installation:
          \`\`\`bash
          pip install bootstrap-wrapper==${{ steps.create-tag.outputs.tag_name }}
          \`\`\`

          ### Bootstrap Release Notes:
          See [Bootstrap ${{ steps.bootstrap-release.outputs.version }} Release](https://github.com/twbs/bootstrap/releases/tag/${{ steps.bootstrap-release.outputs.version }}) for detailed Bootstrap changes.

          ---
          *This release was automatically generated when Bootstrap ${{ steps.bootstrap-release.outputs.version }} was detected.*"
          
          echo "✅ GitHub release created for tag ${{ steps.create-tag.outputs.tag_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          if [ "${{ steps.check-version.outputs.update_needed }}" = "true" ]; then
            echo "✅ Bootstrap updated to ${{ steps.bootstrap-release.outputs.version }}"
            if [ "${{ steps.create-pr.outputs.pull-request-number }}" != "" ]; then
              echo "📝 Pull request #${{ steps.create-pr.outputs.pull-request-number }} created and auto-merged"
              if [ "${{ steps.create-tag.outputs.tag_name }}" != "" ]; then
                echo "🏷️  Git tag ${{ steps.create-tag.outputs.tag_name }} created"
                echo "🚀 GitHub release created automatically"
                echo "📦 PyPI package will be published automatically"
              fi
            fi
          else
            echo "✅ Bootstrap is already up to date (${{ steps.check-version.outputs.current_version }})"
            echo "ℹ️  No action needed"
          fi
